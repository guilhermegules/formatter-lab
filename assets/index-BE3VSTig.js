(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))o(t);new MutationObserver(t=>{for(const n of t)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&o(a)}).observe(document,{childList:!0,subtree:!0});function r(t){const n={};return t.integrity&&(n.integrity=t.integrity),t.referrerPolicy&&(n.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?n.credentials="include":t.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(t){if(t.ep)return;t.ep=!0;const n=r(t);fetch(t.href,n)}})();function c(e,s=0){const r=`depth-${s}`;if(Array.isArray(e)){const o=e.map((t,n)=>`<div class="json-itens ${r}">
            <span class="index">${n}:</span> ${c(t,s+1)}
          </div>`).join("");return`
      <span class="bracket">[</span>
      <div class="${r} json-content">${o}</div>
      <span class="bracket">]</span>`}if(e&&typeof e=="object"){const o=Object.entries(e).map(([t,n])=>`<div class="json-itens ${r}">
            <span class="key">"${t}"</span>: ${c(n,s+1)}
          </div>`).join("");return`
      <span class="bracket">{</span>
      <div class="${r} json-content">${o}</div>
      <span class="bracket">}</span>`}return e===null?'<span class="value">null</span>':typeof e=="string"?`<span class="value">"${e}"</span>`:`<span class="value">${e}</span>`}function f(e){return`<section class="json-container"><div class="json">${c(e)}</div></section>`}const l=document.getElementById("file-picker"),u=document.getElementById("content"),i=document.getElementById("drop-zone");function g(){document.querySelectorAll(".bracket").forEach(s=>{s.addEventListener("click",()=>{if(s.nextElementSibling.classList.contains("collapsed")){s.classList.remove("collapsed-content"),s.nextElementSibling.classList.remove("collapsed");return}s.nextElementSibling.classList.add("collapsed"),s.classList.add("collapsed-content")})})}l.addEventListener("change",async e=>{const s=e.target.files;s&&d(s)});i.addEventListener("dragover",e=>{e.preventDefault(),e.stopPropagation(),i.classList.add("dragover")});i.addEventListener("dragleave",e=>{e.preventDefault(),e.stopPropagation(),i.classList.remove("dragover")});i.addEventListener("click",()=>{l.click()});i.addEventListener("drop",e=>{var r;e.preventDefault(),e.stopPropagation(),i.classList.remove("dragover");const s=(r=e.dataTransfer)==null?void 0:r.files;if(!s||s.length===0){console.log("No files were dropped. Make sure you're dragging files and not other items.");return}d(s)});async function d(e){const[s]=e;if(!s){console.log("Nenhum arquivo selecionado.");return}const o=s.stream().getReader(),t=new TextDecoder("utf-8");let n="";for(;;){const{done:a,value:p}=await o.read();if(a)break;n+=t.decode(p,{stream:!0})}n&&(u.innerHTML=f(JSON.parse(n)),g())}
